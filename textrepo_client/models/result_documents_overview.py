# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultDocumentsOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_count': 'int',
        'has_file': 'int',
        'has_metadata': 'int',
        'has_both': 'int',
        'has_none': 'int'
    }

    attribute_map = {
        'document_count': 'documentCount',
        'has_file': 'hasFile',
        'has_metadata': 'hasMetadata',
        'has_both': 'hasBoth',
        'has_none': 'hasNone'
    }

    def __init__(self, document_count=None, has_file=None, has_metadata=None, has_both=None, has_none=None):  # noqa: E501
        """ResultDocumentsOverview - a model defined in Swagger"""  # noqa: E501
        self._document_count = None
        self._has_file = None
        self._has_metadata = None
        self._has_both = None
        self._has_none = None
        self.discriminator = None
        if document_count is not None:
            self.document_count = document_count
        if has_file is not None:
            self.has_file = has_file
        if has_metadata is not None:
            self.has_metadata = has_metadata
        if has_both is not None:
            self.has_both = has_both
        if has_none is not None:
            self.has_none = has_none

    @property
    def document_count(self):
        """Gets the document_count of this ResultDocumentsOverview.  # noqa: E501


        :return: The document_count of this ResultDocumentsOverview.  # noqa: E501
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this ResultDocumentsOverview.


        :param document_count: The document_count of this ResultDocumentsOverview.  # noqa: E501
        :type: int
        """

        self._document_count = document_count

    @property
    def has_file(self):
        """Gets the has_file of this ResultDocumentsOverview.  # noqa: E501


        :return: The has_file of this ResultDocumentsOverview.  # noqa: E501
        :rtype: int
        """
        return self._has_file

    @has_file.setter
    def has_file(self, has_file):
        """Sets the has_file of this ResultDocumentsOverview.


        :param has_file: The has_file of this ResultDocumentsOverview.  # noqa: E501
        :type: int
        """

        self._has_file = has_file

    @property
    def has_metadata(self):
        """Gets the has_metadata of this ResultDocumentsOverview.  # noqa: E501


        :return: The has_metadata of this ResultDocumentsOverview.  # noqa: E501
        :rtype: int
        """
        return self._has_metadata

    @has_metadata.setter
    def has_metadata(self, has_metadata):
        """Sets the has_metadata of this ResultDocumentsOverview.


        :param has_metadata: The has_metadata of this ResultDocumentsOverview.  # noqa: E501
        :type: int
        """

        self._has_metadata = has_metadata

    @property
    def has_both(self):
        """Gets the has_both of this ResultDocumentsOverview.  # noqa: E501


        :return: The has_both of this ResultDocumentsOverview.  # noqa: E501
        :rtype: int
        """
        return self._has_both

    @has_both.setter
    def has_both(self, has_both):
        """Sets the has_both of this ResultDocumentsOverview.


        :param has_both: The has_both of this ResultDocumentsOverview.  # noqa: E501
        :type: int
        """

        self._has_both = has_both

    @property
    def has_none(self):
        """Gets the has_none of this ResultDocumentsOverview.  # noqa: E501


        :return: The has_none of this ResultDocumentsOverview.  # noqa: E501
        :rtype: int
        """
        return self._has_none

    @has_none.setter
    def has_none(self, has_none):
        """Sets the has_none of this ResultDocumentsOverview.


        :param has_none: The has_none of this ResultDocumentsOverview.  # noqa: E501
        :type: int
        """

        self._has_none = has_none

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultDocumentsOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultDocumentsOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
